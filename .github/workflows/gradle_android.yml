# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle
#                      and: https://docs.gluonhq.com/#platforms_android

name: Java CI with Gradle

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
      
    steps:
      # Checkout your project
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      # Make sure the latest GraalVM is installed.
      # after this step env.JAVA_HOME and env.GRAALVM_HOME will point to the GraalVM location
      - name: Setup GraalVM built by Gluon
        uses: gluonhq/setup-graalvm@master
        # set GITHUB_TOKEN to avoid exceeding GitHub's API rate limit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Install extra requirements on top of ubuntu-latest
      - name: Install libraries
        run: sudo apt install libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libgl-dev libgtk-3-dev libpango1.0-dev libxtst-dev


      # Setup the Android keystore, based on a repo secret. See the section 'Setup Android Keystore' below.
      #- name: Setup Android Keystore
      #  id: android_keystore_file
      #  uses: timheuer/base64-to-file@v1
      #  with:
      #    fileName: 'my.keystore'
      #    encodedString: ${{ secrets.GLUON_ANDROID_KEYSTORE_BASE64 }}

      # Install the Gluon License (optional)
      # Using this step requires you to set a GLUON_LICENSE secret in the secret configuration of your repo. Have a look at https://gluonhq.com/products/mobile/buy for more information about obtaining a license.
      #- name: Gluon License
      #  uses: gluonhq/gluon-build-license@v1
      #  with:
      #    gluon-license: ${{ secrets.GLUON_LICENSE }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build your project using Maven
      # The android profile is used, which means a native build will be created for the client target android.
      # This step also uses some env variables taken from the repo secrets. See the section 'Setup Android Keystore' below.
      - name: Android Build with Gradle
        run: ./gradlew clean nativeBuild nativePackage

      # Create staging directory in which the apk will be copied
      - name: Make staging directory
        run: mkdir staging

      # Copy the apk to the staging directory
      - name: Copy native clients to staging
        run: cp -r build/client/aarch64-android/*.apk staging

      # Upload the staging directoy as a build artifact
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: Package
          path: staging

      # Upload the apk to the Google Play Store. See the section below.
      #- name: Upload to Google Play
      #  uses: r0adkll/upload-google-play@v1
      #  with:
      #    serviceAccountJsonPlainText: ${{ secrets.GLUON_ANDROID_SERVICE_ACCOUNT_JSON }}
      #    packageName: com.gluonhq.samples.hellogluon
      #    releaseFiles: target/client/aarch64-android/gvm/HelloGluon.apk
      #    track: beta
