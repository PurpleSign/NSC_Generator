# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle
#                      and: https://docs.gluonhq.com/#platforms_windows

name: Java CI with Gradle on Windows

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    - name: Build with Gradle
      run: ./gradlew build
    
    runs-on: windows-latest
    steps:
      # Checkout your code
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      # Setup the Windows build environment
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Visual Studio shell
        uses: egor-tensin/vs-shell@v1

      # Make sure the latest GraalVM is installed.
      # after this step env.JAVA_HOME and env.GRAALVM_HOME will point to the GraalVM location
      - name: Setup GraalVM built by Gluon
        uses: gluonhq/setup-graalvm@master
        # set GITHUB_TOKEN to avoid exceeding GitHub's API rate limit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create a staging directory where the binary will be copied into
      - name: Make depl directory
        run: mkdir depl

      # Install the Gluon License (optional)
      # Using this step requires you to set a GLUON_LICENSE secret in the secret configuration of your repo. Have a look at https://gluonhq.com/products/mobile/buy for more information about obtaining a license.
      #- name: Gluon License
      #  uses: gluonhq/gluon-build-license@v1
      #  with:
      #    gluon-license: ${{ secrets.GLUON_LICENSE }}

      # Build your project using Gradle
      # The desktop profile is used, which means a native build will be created for the host platform (in this case Windows) itself.
      - name: Gluon Build with Gradle
        run: ./gradlew clean nativeBuild

      # Copy the native binary to the staging directory
      - name: Copy native client to depl
        run: cp -r target/client/x86_64-windows/NSC_Generator.exe depl

      # Upload the staging directory as a build artifact. You will be able to download this after the build finishes.
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: Package
          path: depl
